/*
 * ArticoliFrame.java
 *
 * Created on 12 gennaio 2008, 21.48
 */

package com.brevevita.videonoleggio.gui;

import com.sun.demo.addressbook.*;

import com.brevevita.videonoleggio.db.bvdb;
import java.awt.Image;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.URL;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JTabbedPane;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  Michele Piunti
 */
public class ArticoliApp extends JPanel 
        implements ActionListener, ListSelectionListener {
    
    /** Creates new form AddressFrame */
    public ArticoliApp(bvdb DB) {
        this.db = DB;
        initComponents();

        addressActionPanel.addActionListener(this);
        tPanel.setEditable(false);
        List<ListEntry> entries = db.getListArticoli();
        articoliListPanel.addListEntries(entries);
        articoliListPanel.addListSelectionListener(this);
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    private void initComponents() {
        this.setLayout(new BorderLayout());
        addressActionPanel = new com.sun.demo.addressbook.AddressActionPanel();
        tPanel = new com.sun.demo.addressbook.ArticoloPanel();
        articoliListPanel = new com.sun.demo.addressbook.AddressListPanel();
        
        centralPane = new JPanel(new BorderLayout());
        
        nol = new BrevevitaTable(db);
        nol.setOpaque(true); //content panes must be opaque
        
        centralPane.add(tPanel, java.awt.BorderLayout.CENTER);
        centralPane.add(nol, java.awt.BorderLayout.SOUTH);

        this.add(addressActionPanel, java.awt.BorderLayout.SOUTH);
        this.add(centralPane, java.awt.BorderLayout.CENTER);
        this.add(articoliListPanel, java.awt.BorderLayout.WEST);

    }// </editor-fold>                        

    private void viewArticoli(){
        System.out.println("View Articoli");
        //nol.updateModelCl(BrevevitaPanel.getCliente().getId());
        JFrame frame = new JFrame("Lista Articoli Brevevita");
        frame.setSize(800,600);
        final BrevevitaTable tab = new BrevevitaTable(db);
        //Create and set up the content pane.
        tab.setModelArticoli();
        tab.setOpaque(true); //content panes must be opaque
        JButton but = new JButton("Stampa");
        but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                System.out.println("printing tab articoli");
                tab.print();
            }
        });
        frame.getContentPane().add(tab, BorderLayout.CENTER);
        frame.getContentPane().add(but, BorderLayout.SOUTH);

        //Display the window.
        //frame.pack();
        frame.setVisible(true);
        
    }
    
//    private void cancelArticolo() {
//        tPanel.clear();
//        tPanel.setEditable(false);
//        ListEntry entry = articoliListPanel.getSelectedListEntry();
//        if (entry != null) {
//            int id = entry.getId();
//            Articolo articolo = db.getArticolo(id);
//            tPanel.setArticolo(articolo);
//        }     
//    }
    
    private void newArticolo(){
        tPanel.clear();
        tPanel.setEditable(true);
        
    }
    
    private void deleteArticolo() {
        Articolo ar = tPanel.getArticolo();
        int n = JOptionPane.showConfirmDialog(
                new JFrame(),
                "Vuoi davvero CANCELLARE l' articolo:\n "+
                    ar.getTitolo() + " ?"+
                "\n\nse SI l'operazione non e' reversibile..",
                "Warning!",
                JOptionPane.YES_NO_OPTION);

        if(n == JOptionPane.YES_OPTION){
            int id = tPanel.getId();
            if (id != -1) {
                db.deleteArticolo(id);
                int selectedIndex = articoliListPanel.deleteSelectedEntry();
                if (selectedIndex >= 0) {
                    selectedIndex = articoliListPanel.setSelectedIndex(selectedIndex);
                    ListEntry entry = articoliListPanel.getSelectedListEntry();
                    if (entry != null) {
                        id = entry.getId();
                        Articolo articolo = db.getArticolo(id);
                        tPanel.setArticolo(articolo);
                    } else {
                        tPanel.clear();
                    }
                }
            } else {
                tPanel.clear();
            }
            tPanel.setEditable(false);
        }    
    }
    
    private void editArticolo() {
        int selected = articoliListPanel.getSelectedIndex();
        if (selected >=0) {
            tPanel.setEditable(true);
        }
        
    }
    
    private void saveArticolo() {
        if (tPanel.isEditable()) {
            Articolo articolo = tPanel.getArticolo();
            int id = articolo.getId();
//                System.out.println("id articolo: " +id);
//                String titolo = articolo.getTitolo();
//                String anno = articolo.getAnno();            
            if (id == -1) {
                id = db.saveArticolo(articolo);
                articolo.setId(id);

            } else {
                db.editArticolo(articolo);
            }
            updateList();
            tPanel.setArticolo(articolo);
            articoliListPanel.setSelectionWithID(articolo.getId());
            tPanel.setEditable(false);
        }
    }
    
    
    public void actionPerformed(ActionEvent e) {
        String actionCommand = e.getActionCommand();
        System.out.println("ActionEvent: " + actionCommand);
        if (actionCommand.equalsIgnoreCase("GET_LIST")) {
            viewArticoli();
        } else if (actionCommand.equalsIgnoreCase("NEW_CLIENTE")) {
            newArticolo();
        } else if (actionCommand.equalsIgnoreCase("CANCEL_CLIENTE")) {
            //deleteArticolo();
        } else if (actionCommand.equalsIgnoreCase("EDIT_CLIENTE")) {
            editArticolo();
        } else if (actionCommand.equalsIgnoreCase("SAVE_CLIENTE")) {
            saveArticolo();
        }
    }
    
    public void updateList(){
        List<ListEntry> articoli = db.getListArticoli();
        articoliListPanel.clear();
        articoliListPanel.addListEntries(articoli);
    }



    public void valueChanged(ListSelectionEvent e) {
        if (e.getValueIsAdjusting()) {
            return;
        }
        JList entryList = (JList) e.getSource();
        selectedEntry = entryList.getSelectedIndex();
        ListEntry entry = (ListEntry)entryList.getSelectedValue();
        if (entry != null) {
            int id = entry.getId();
            Articolo articolo = db.getArticolo(id);
            tPanel.setArticolo(articolo);
            nol.updateModelAr(id);
        } else {
            tPanel.clear();
        }
    }
    
    
    // Variables declaration - do not modify                     
    private AddressActionPanel addressActionPanel;
    private AddressListPanel articoliListPanel;
    private ArticoloPanel tPanel;
    private BrevevitaTable nol;
    private JPanel centralPane;
    // End of variables declaration                   
    
    private int selectedEntry = -1;
    private bvdb db;
    private WindowAdapter windowAdapter;
    
    
    

}
